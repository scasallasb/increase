import numpy as np
import math as m
import scipy as sc
import matplotlib.pyplot as plt
import networkx as nx


def rtyy(hj):
    j=nx.erdos_renyi_graph(hj,1)
    G=nx.Graph()
    K,A,B,hmax,hmin=1,2.0,10,30,15
    for i in j.edges():       
        r=list(i)
        e=np.random.random_integers(10,20)
        G.add_edge(r[0],r[1],weight=e)
    
    COVERh=nx.Graph()
    COVERh.add_nodes_from(G)
    COMPh=nx.number_connected_components(COVERh)
    # otras variables
    inf=m.factorial(20)
    u=nx.get_edge_attributes(G,'weight') 
    def c(h):
         if h <= hmin:
            costo=K*h
         else:
            costo=(A*h)+B
         return costo  
    def c_1(ci):
         if ci > (c(hmin)):
             l=(ci-B)/A
         else:
             l=ci
         return l  
    
    def beta(n1,n2,d):
         try:
             aux=(2.0*(u[(n1,n2)]))
         except (IndexError, KeyError):
             aux=(2.0*(u[(n2,n1)]))
         HI=h[n1]+h[n2]+d
         if HI<aux:
             B =aux-HI
         else:
             B=0
         return B
    def nbrfun(n,d):
         p=[]
         r=set()
         for i in range(0,nx.number_connected_components(COVERh)):
             p.append(nx.connected_component_subgraphs(COVERh)[i])
             for o in p[i].nodes():
                 if o==n:
                     r=set(G.neighbors(n)) - set(p[i].neighbors(n))
         r=list(r)
         L=[]
         l=[]
         for i in range(0,len(r)):
             beTa=beta(n,r[i],d)
             G.add_node(r[i],hinc=beTa)
             G.add_node(r[i],cinc=(c(beTa + h[r[i]])- c(h[r[i]])))
             l.append((r[i],(c(beTa+ h[r[i]])-c(h[r[i]]))))
         l=dict(l)
         va= l.values()
         va.sort()
         for i in range(0,len(va)):
             for j in range(0,len(va)):
                 if l[r[j]]== va[i]:
                     if L.count(r[j])==0:
                        L.append(r[j])
         for i in range(0,nx.number_connected_components(COVERh)):
             ri=list(set(L) & set(p[i].nodes()))
             u=inf
             for j in range(0,len(ri)):
                 if L.index(ri[j])< u:
                     try:
                         L.remove(L[u])
                         break
                     except (IndexError):
                         pass
                     u = L.index(ri[j]) 
         return r, L

    def START_TC_ALGO( h, n, dirac):
         G.add_node(n,hinc=(dirac))
         G.add_node(n,cinc=c(h[n]+dirac)-c(h[n]))
         nbr, L= nbrfun(n,dirac)
         rbest, kbest=inf,0
         for k in range(1,len(L)+1):
             sum=0
             for i in range(0,k):
                 sum= (G.node[L[i]]['cinc'])+sum
             rtemp= ((G.node[n]['cinc']) + sum)/(k)
             if rtemp <  rbest:
                 kbest,rbest=k,rtemp
         j=0
         L=L[:kbest]
         if len(L)>0:
             for i in G.nodes():
                 if (i==L[j] or i==n):
                     if (j<kbest and j<(len(L)-1) ):
                         j=j+1
                 else:
                     G. add_node(i,hinc=0)
         incr= nx.get_node_attributes(G,'hinc')
         return rbest,incr, L

    for n in G.nodes():
         G.add_node(n,hi=0)   

    while COMPh > 1:
         rbest=inf
         for n in G.nodes():
             h=nx.get_node_attributes(G,'hi')
             chn=c(h[n])
             i,e=1,(c_1(chn+ 1))
             H=[h[n],hmax]
             while e < hmax:
                 H.append(e)
                 e= c_1(chn + (i))
                 i=i+1
             for i in range(0, len(H)):
                 a=(H[i]-h[n])
                 if a<0:a=0
                 rtmp,incrtmp, mayl=START_TC_ALGO(h,n,a)
                 if (rtmp < rbest):
                     nodo,rbest,incrbest, mayL=n,rtmp,incrtmp, mayl
         for i in incrbest.keys():
             for j in range (0,len(mayL)):
                 if (incrbest[i] >= 0) and (i==mayL[j]):
                     COVERh.add_edge(nodo,i)
         for i in G.nodes():
             G.add_node(i,hi=h[i]+incrbest[i])     
         COMPh=nx.number_connected_components(COVERh)
    costo =0
    for n in G.nodes():
        costo=costo+(c(G.node[n]['hi']))
    T=nx.minimum_spanning_tree(G)
    u1 =nx.get_edge_attributes(T,'weight')
    for n  in T.nodes():
        T.node[n]['hi']=0
    for n in T.edges():
        r=list(n)
        aux=T.node[r[0]]['hi']+T.node[r[1]]['hi']
        aux1=(2* u1[n])
        if aux< aux1:
            T.node[r[0]]['hi']=T.node[r[0]]['hi']+((aux1-aux)/2.0)
            T.node[r[1]]['hi']=T.node[r[1]]['hi']+((aux1-aux)/2.0)
    costo1 =0
    for n in T.nodes():
        costo1=costo1+(c(T.node[n]['hi']))
    '''print costo
    print nx.get_node_attributes(T,'hi')
    print(nx.get_node_attributes(G,'hi'))
    print 'T',T.edges()
    print COVERh.edges()
    print(nx.get_node_attributes(G,'hi'))
    print '-----------------------------------------------------'
    dr=plt.figure()
    dr.add_subplot(131)
    #nx.draw_networkx_edge_labels(COVERh,pos)
    nx.draw_shell(G)
    dr.add_subplot(132)
    nx.draw_shell(COVERh)
    dr.add_subplot(133)
    nx.draw_shell(T)
    plt.show()'''
    return costo,costo1
data=[]
Tda=[]
Apda=[]
for i in range(10,51,5):
    d=[]
    T=[]
    Ap=[]
    for j in range(20):
        a,a1=rtyy(i)
        d.append((a1-a)/a)
        T.append(a1)
        Ap.append(a)
    data.append((i,d))
    Tda.append((i,T))
    Apda.append((i,Ap))
data=dict(data)
Tda=dict(Tda)
Apda=dict(Apda)
des=[]
med=[]
for i in data.keys():
    des.append((i,np.std(data[i])))
    med.append((i,np.mean(data[i])))

des=dict(des)
med=dict(med)
x=med.keys()
y=med.values()
error1=des.values()
plt.errorbar(x, y, yerr=error1,linestyle="None", fmt='-o')
plt.xticks(np.arange(min(med.keys())-1,max(med.keys())+2, 1.0))
plt.title(' Algoritmo Aproximado vs Heuristica Simple')
plt.xlabel(u'Numero de nodos')
plt.ylabel('Mean of R_simple')
plt.grid()
plt.savefig("estadisticas.png")
plt.show()