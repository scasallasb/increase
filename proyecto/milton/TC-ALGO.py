import numpy as np
import math as m
import scipy as sc
import matplotlib.pyplot as plt
import networkx as nx


def rtyy(hj):
    j=nx.erdos_renyi_graph(hj,1)
    G=nx.Graph()
    K,A,B,hmax,hmin=1,2.0,10,30,15
    #er={(26, 47): 15, (5, 31): 17, (20, 25): 12, (3, 35): 15, (27, 46): 15, (6, 28): 14, (21, 28): 19, (4, 36): 15, (28, 41): 19, (17, 20): 10, (7, 25): 15, (31, 44): 20, (29, 44): 19, (35, 41): 19, (18, 19): 20, (33, 41): 15, (16, 47): 19, (32, 37): 10, (34, 46): 17, (17, 46): 12, (13, 32): 20, (11, 48): 15, (18, 45): 12, (14, 31): 13, (38, 40): 17, (15, 30): 19, (39, 45): 17, (11, 22): 14, (17, 49): 16, (0, 17): 17, (41, 47): 16, (12, 17): 19, (1, 28): 20, (13, 20): 13, (2, 27): 10, (30, 41): 11, (36, 37): 19, (14, 43): 11, (47, 49): 15, (25, 49): 17, (15, 34): 13, (4, 5): 18, (19, 39): 10, (0, 45): 12, (22, 48): 19, (5, 24): 16, (20, 32): 15, (3, 40): 11, (27, 39): 14, (1, 40): 16, (6, 23): 11, (21, 37): 19, (4, 35): 11, (28, 32): 14, (2, 47): 10, (8, 38): 20, (7, 22): 20, (22, 42): 17, (5, 34): 20, (29, 37): 15, (35, 46): 17, (9, 39): 20, (33, 34): 18, (16, 38): 18, (6, 41): 14, (36, 41): 16, (10, 36): 12, (34, 41): 16, (8, 12): 17, (7, 44): 20, (37, 44): 14, (11, 41): 18, (18, 36): 10, (10, 14): 12, (8, 18): 10, (39, 42): 17, (11, 15): 13, (9, 19): 13, (1, 21): 12, (46, 47): 14, (23, 26): 16, (2, 18): 18, (0, 14): 12, (3, 11): 10, (1, 15): 18, (15, 43): 11, (4, 12): 12, (19, 44): 10, (2, 12): 13, (26, 49): 16, (0, 36): 16, (24, 33): 13, (28, 49): 15, (20, 47): 18, (3, 17): 12, (1, 33): 15, (6, 14): 17, (21, 46): 12, (4, 42): 20, (23, 24): 15, (2, 38): 14, (8, 45): 14, (7, 15): 17, (22, 45): 15, (5, 43): 18, (20, 21): 15, (9, 40): 14, (16, 29): 12, (6, 32): 17, (4, 48): 19, (10, 47): 11, (17, 24): 18, (7, 37): 13, (11, 46): 20, (18, 31): 11, (40, 48): 20, (12, 41): 17, (43, 45): 13, (8, 25): 17, (17, 27): 20, (13, 44): 14, (44, 46): 17, (9, 20): 18, (24, 28): 12, (14, 19): 12, (45, 47): 10, (10, 19): 19, (11, 26): 12, (26, 30): 16, (0, 5): 10, (23, 34): 19, (12, 29): 20, (27, 31): 11, (15, 48): 11, (4, 11): 16, (2, 7): 16, (30, 43): 14, (24, 40): 17, (5, 10): 19, (3, 22): 17, (25, 37): 17, (4, 17): 13, (19, 27): 15, (2, 33): 14, (26, 34): 18, (18, 35): 18, (22, 36): 20, (5, 20): 15, (20, 28): 20, (27, 43): 20, (16, 20): 20, (6, 27): 13, (30, 36): 12, (28, 44): 16, (7, 34): 10, (22, 30): 10, (32, 39): 13, (11, 39): 16, (18, 22): 13, (42, 43): 10, (16, 42): 13, (12, 32): 12, (32, 44): 18, (10, 48): 13, (17, 43): 15, (13, 37): 12, (32, 38): 20, (9, 29): 18, (23, 47): 19, (14, 26): 15, (10, 26): 19, (15, 19): 14, (11, 19): 20, (0, 28): 10, (12, 20): 19, (1, 25): 18, (13, 25): 16, (2, 30): 13, (24, 47): 14, (14, 38): 12, (3, 31): 20, (25, 46): 13, (15, 39): 19, (21, 48): 12, (4, 24): 10, (19, 32): 19, (26, 45): 12, (0, 40): 10, (5, 29): 13, (20, 27): 11, (3, 37): 13, (27, 32): 12, (6, 18): 11, (21, 26): 14, (4, 38): 14, (28, 43): 19, (18, 32): 12, (8, 33): 20, (7, 27): 10, (31, 46): 12, (5, 39): 16, (29, 42): 16, (35, 43): 18, (33, 47): 19, (16, 33): 15, (30, 49): 16, (36, 44): 18, (34, 44): 17, (17, 44): 17, (7, 49): 11, (31, 39): 10, (35, 49): 18, (18, 43): 20, (14, 29): 12, (38, 46): 16, (43, 49): 12, (15, 24): 18, (39, 47): 14, (0, 19): 15, (12, 19): 13, (1, 18): 20, (13, 18): 18, (2, 25): 13, (0, 9): 14, (23, 32): 11, (14, 41): 20, (3, 4): 19, (15, 44): 14, (4, 7): 12, (19, 41): 16, (0, 47): 13, (5, 6): 20, (20, 34): 19, (3, 42): 16, (1, 46): 16, (6, 21): 10, (21, 35): 13, (4, 45): 13, (28, 34): 17, (2, 45): 17, (8, 40): 12, (7, 16): 10, (22, 40): 14, (5, 32): 15, (29, 35): 20, (3, 48): 19, (9, 37): 13, (16, 24): 19, (6, 47): 15, (36, 43): 14, (10, 34): 15, (34, 39): 18, (8, 14): 18, (7, 46): 16, (23, 45): 10, (37, 42): 14, (11, 43): 10, (9, 15): 10, (31, 32): 17, (12, 44): 14, (36, 49): 12, (10, 12): 10, (8, 20): 14, (13, 49): 12, (44, 49): 19, (9, 17): 19, (40, 43): 16, (30, 34): 11, (10, 22): 15, (32, 33): 14, (2, 16): 11, (29, 43): 11, (14, 48): 16, (3, 13): 17, (1, 13): 12, (4, 14): 19, (19, 46): 10, (2, 10): 17, (0, 38): 10, (24, 35): 10, (5, 15): 12, (20, 41): 16, (3, 19): 15, (1, 39): 10, (25, 34): 17, (6, 12): 20, (21, 44): 20, (4, 20): 20, (19, 20): 17, (2, 36): 15, (8, 47): 20, (7, 9): 16, (22, 35): 15, (5, 41): 20, (20, 23): 15, (9, 46): 12, (16, 31): 11, (6, 38): 19, (21, 22): 17, (10, 45): 19, (18, 34): 20, (17, 30): 17, (7, 39): 10, (11, 32): 11, (9, 48): 17, (42, 46): 16, (12, 43): 19, (43, 47): 14, (8, 27): 19, (13, 42): 13, (9, 26): 18, (17, 32): 14, (14, 17): 17, (23, 40): 17, (10, 17): 17, (25, 31): 17, (15, 20): 20, (11, 28): 10, (26, 28): 18, (0, 7): 16, (31, 34): 19, (12, 31): 14, (1, 6): 16, (18, 49): 11, (13, 30): 16, (2, 5): 19, (23, 38): 13, (5, 8): 20, (20, 48): 10, (3, 24): 15, (25, 43): 15, (6, 7): 10, (4, 19): 16, (19, 29): 13, (26, 32): 16, (5, 18): 19, (20, 30): 14, (27, 45): 20, (16, 22): 20, (6, 25): 10, (21, 31): 20, (28, 46): 12, (17, 23): 14, (7, 28): 15, (22, 28): 10, (29, 47): 12, (35, 36): 18, (18, 20): 12, (17, 38): 18, (16, 44): 11, (12, 34): 13, (36, 39): 15, (17, 41): 14, (13, 35): 18, (37, 38): 15, (18, 46): 20, (14, 24): 17, (10, 24): 17, (15, 29): 12, (39, 48): 13, (11, 21): 10, (0, 30): 18, (12, 22): 15, (1, 31): 19, (13, 23): 20, (2, 28): 18, (24, 49): 13, (14, 36): 11, (17, 39): 15, (1, 49): 15, (25, 44): 10, (15, 33): 15, (4, 26): 20, (19, 34): 18, (26, 43): 15, (0, 42): 12, (5, 27): 17, (20, 37): 20, (3, 39): 19, (27, 34): 17, (1, 43): 10, (6, 16): 13, (21, 24): 16, (4, 32): 10, (28, 37): 20, (34, 48): 17, (8, 35): 20, (7, 21): 17, (22, 23): 15, (5, 37): 17, (29, 40): 15, (32, 35): 12, (9, 34): 11, (33, 45): 12, (16, 35): 18, (6, 42): 17, (36, 46): 14, (23, 27): 11, (8, 9): 13, (37, 47): 14, (18, 41): 17, (38, 44): 20, (15, 26): 11, (39, 41): 12, (0, 21): 11, (12, 13): 17, (1, 16): 12, (13, 16): 17, (2, 23): 14, (0, 11): 15, (14, 47): 15, (3, 6): 18, (1, 10): 17, (15, 46): 19, (19, 43): 15, (2, 49): 11, (0, 33): 17, (23, 36): 10, (40, 46): 15, (20, 44): 11, (3, 44): 18, (17, 33): 20, (1, 44): 12, (23, 49): 19, (6, 11): 18, (21, 33): 18, (4, 47): 12, (2, 43): 13, (8, 42): 11, (7, 18): 16, (22, 46): 13, (5, 46): 11, (29, 33): 11, (9, 43): 16, (33, 38): 11, (16, 26): 14, (6, 45): 13, (41, 45): 19, (10, 32): 16, (34, 37): 14, (8, 48): 11, (7, 40): 12, (37, 40): 16, (11, 45): 17, (9, 13): 14, (16, 48): 12, (38, 39): 15, (12, 46): 13, (8, 22): 15, (13, 47): 11, (9, 23): 15, (24, 25): 19, (31, 36): 20, (10, 20): 12, (11, 25): 11, (0, 2): 20, (3, 15): 14, (1, 3): 11, (4, 8): 16, (19, 48): 11, (2, 8): 10, (24, 37): 19, (5, 13): 14, (20, 43): 15, (3, 21): 17, (27, 48): 18, (1, 37): 10, (25, 32): 18, (21, 42): 15, (4, 22): 12, (19, 22): 11, (2, 34): 15, (26, 39): 20, (7, 11): 15, (22, 33): 14, (5, 23): 20, (9, 44): 13, (16, 17): 11, (6, 36): 19, (30, 33): 16, (10, 43): 12, (17, 28): 13, (7, 33): 18, (22, 27): 16, (5, 49): 20, (11, 34): 14, (18, 27): 13, (42, 44): 11, (12, 37): 17, (18, 38): 12, (8, 29): 13, (41, 49): 12, (13, 40): 14, (9, 24): 18, (14, 23): 16, (38, 48): 19, (23, 43): 10, (10, 31): 12, (25, 29): 13, (15, 22): 10, (11, 30): 13, (30, 44): 10, (0, 25): 13, (12, 25): 12, (1, 4): 12, (13, 28): 20, (2, 3): 11, (24, 44): 12, (14, 35): 17, (3, 26): 16, (26, 37): 18, (25, 41): 18, (4, 29): 16, (19, 31): 14, (26, 46): 14, (23, 42): 20, (5, 16): 16, (20, 24): 16, (3, 32): 20, (27, 47): 15, (33, 48): 18, (40, 44): 17, (6, 31): 11, (21, 29): 14, (28, 40): 20, (17, 21): 16, (7, 30): 12, (31, 45): 11, (29, 45): 11, (35, 38): 19, (33, 42): 14, (16, 46): 11, (6, 49): 12, (17, 36): 15, (17, 47): 11, (13, 33): 13, (11, 49): 16, (18, 44): 20, (42, 49): 17, (14, 30): 15, (38, 43): 16, (15, 31): 16, (11, 23): 12, (0, 16): 10, (12, 16): 17, (1, 29): 13, (13, 21): 15, (2, 26): 18, (32, 40): 14, (14, 42): 18, (23, 28): 13, (15, 35): 10, (40, 47): 14, (19, 36): 11, (18, 29): 20, (26, 41): 11, (0, 44): 18, (5, 25): 20, (20, 39): 10, (3, 41): 16, (27, 36): 10, (1, 41): 14, (6, 22): 12, (21, 38): 16, (4, 34): 15, (28, 39): 17, (2, 46): 15, (8, 37): 11, (7, 23): 11, (31, 42): 19, (5, 35): 11, (29, 38): 14, (35, 47): 12, (9, 32): 10, (33, 35): 14, (16, 37): 16, (6, 40): 19, (29, 49): 10, (10, 39): 18, (34, 40): 14, (8, 11): 18, (7, 45): 17, (31, 48): 20, (37, 45): 13, (9, 10): 10, (12, 49): 19, (8, 17): 10, (39, 43): 11, (11, 12): 19, (17, 48): 12, (0, 23): 11, (48, 49): 19, (12, 15): 19, (1, 22): 17, (13, 14): 10, (2, 21): 10, (30, 46): 15, (0, 13): 13, (14, 45): 13, (3, 8): 19, (1, 8): 11, (15, 40): 16, (19, 45): 12, (2, 15): 11, (26, 48): 15, (0, 35): 19, (24, 32): 19, (20, 46): 12, (3, 46): 12, (1, 34): 14, (6, 9): 19, (21, 47): 19, (4, 41): 10, (2, 41): 17, (8, 44): 15, (7, 12): 17, (22, 44): 14, (5, 44): 17, (9, 41): 20, (33, 36): 15, (16, 28): 15, (6, 35): 13, (10, 46): 14, (34, 35): 10, (17, 25): 17, (7, 42): 19, (11, 47): 16, (18, 30): 17, (12, 40): 15, (17, 37): 10, (8, 24): 17, (13, 45): 12, (37, 48): 14, (44, 45): 20, (9, 21): 10, (24, 27): 13, (14, 18): 18, (45, 48): 19, (10, 18): 15, (25, 26): 10, (40, 45): 14, (41, 43): 17, (11, 27): 10, (0, 4): 12, (17, 34): 19, (12, 28): 15, (27, 28): 10, (15, 49): 12, (4, 10): 17, (28, 31): 14, (2, 6): 15, (36, 40): 13, (24, 39): 20, (5, 11): 15, (29, 30): 11, (3, 23): 18, (30, 31): 11, (25, 38): 10, (21, 40): 15, (4, 16): 20, (19, 24): 12, (2, 32): 11, (23, 29): 13, (32, 48): 13, (22, 39): 18, (5, 21): 14, (27, 40): 14, (16, 19): 16, (6, 26): 18, (30, 39): 10, (10, 41): 14, (17, 18): 18, (7, 35): 19, (22, 25): 10, (11, 36): 13, (18, 25): 11, (16, 41): 12, (12, 39): 16, (8, 31): 13, (13, 38): 15, (9, 30): 14, (14, 21): 10, (10, 29): 17, (15, 16): 15, (11, 16): 14, (0, 27): 16, (12, 27): 16, (1, 26): 11, (13, 26): 16, (28, 29): 11, (30, 40): 18, (0, 49): 16, (24, 46): 20, (14, 33): 19, (3, 28): 11, (25, 47): 11, (15, 36): 19, (21, 49): 13, (4, 31): 15, (19, 33): 13, (26, 44): 16, (5, 30): 11, (20, 26): 11, (3, 34): 10, (27, 33): 18, (6, 29): 10, (21, 27): 19, (4, 37): 17, (28, 42): 11, (8, 32): 12, (7, 24): 14, (23, 46): 15, (24, 42): 14, (35, 40): 16, (33, 40): 15, (16, 32): 18, (30, 48): 18, (34, 47): 19, (17, 45): 11, (18, 42): 11, (14, 28): 18, (38, 41): 11, (15, 25): 18, (39, 44): 10, (0, 18): 13, (12, 18): 15, (1, 19): 10, (13, 19): 10, (32, 45): 19, (2, 24): 14, (0, 8): 15, (14, 40): 20, (3, 5): 16, (25, 48): 17, (15, 45): 11, (4, 6): 11, (19, 38): 13, (0, 46): 16, (22, 49): 19, (5, 7): 17, (20, 33): 15, (3, 43): 18, (27, 38): 12, (1, 47): 18, (6, 20): 11, (21, 36): 15, (4, 44): 17, (28, 33): 18, (2, 44): 15, (8, 39): 18, (7, 17): 10, (22, 43): 14, (5, 33): 10, (29, 36): 15, (3, 49): 10, (9, 38): 20, (16, 39): 12, (6, 46): 11, (36, 42): 16, (10, 37): 11, (34, 38): 13, (8, 13): 20, (7, 47): 17, (37, 43): 14, (11, 40): 19, (18, 37): 11, (36, 48): 11, (10, 15): 16, (8, 19): 15, (11, 14): 17, (44, 48): 15, (9, 18): 11, (47, 48): 12, (1, 20): 13, (2, 19): 17, (0, 15): 12, (23, 35): 12, (3, 10): 14, (1, 14): 19, (15, 42): 17, (4, 13): 13, (19, 47): 16, (2, 13): 20, (30, 42): 12, (0, 37): 16, (24, 34): 15, (20, 40): 16, (3, 16): 13, (1, 32): 20, (25, 35): 19, (6, 15): 15, (21, 45): 16, (4, 43): 16, (19, 21): 18, (2, 39): 10, (8, 46): 11, (7, 14): 10, (22, 34): 15, (5, 42): 12, (20, 22): 15, (9, 47): 13, (16, 30): 12, (6, 33): 19, (21, 23): 17, (4, 49): 14, (10, 44): 12, (17, 31): 17, (7, 36): 14, (23, 44): 10, (32, 43): 14, (11, 33): 15, (9, 49): 20, (31, 35): 20, (40, 49): 15, (12, 42): 10, (43, 44): 14, (8, 26): 18, (13, 43): 20, (44, 47): 11, (9, 27): 18, (24, 29): 20, (14, 16): 13, (32, 41): 11, (45, 46): 16, (10, 16): 18, (15, 21): 14, (11, 29): 18, (26, 31): 15, (0, 6): 13, (12, 30): 20, (27, 30): 11, (1, 7): 20, (23, 25): 17, (13, 31): 20, (2, 4): 18, (24, 41): 17, (5, 9): 14, (3, 25): 17, (25, 36): 13, (4, 18): 13, (19, 26): 16, (26, 35): 18, (22, 37): 15, (5, 19): 10, (20, 29): 12, (27, 42): 11, (16, 21): 12, (6, 24): 16, (30, 37): 11, (40, 42): 14, (28, 45): 14, (17, 26): 17, (7, 29): 17, (22, 31): 20, (11, 38): 20, (35, 37): 12, (18, 23): 12, (32, 49): 20, (16, 43): 16, (12, 33): 17, (36, 38): 15, (10, 49): 16, (17, 42): 13, (13, 36): 20, (37, 39): 18, (35, 45): 19, (9, 28): 19, (14, 27): 20, (31, 47): 11, (10, 27): 17, (15, 18): 12, (39, 49): 11, (11, 18): 18, (0, 29): 13, (12, 21): 13, (1, 24): 20, (13, 24): 20, (2, 31): 18, (23, 33): 18, (14, 39): 18, (3, 30): 12, (25, 45): 10, (15, 38): 11, (4, 25): 11, (19, 35): 12, (26, 42): 18, (0, 41): 14, (5, 28): 20, (20, 36): 11, (3, 36): 18, (27, 35): 15, (6, 19): 20, (21, 25): 20, (4, 39): 19, (28, 36): 10, (8, 34): 12, (7, 26): 11, (31, 41): 17, (5, 38): 15, (29, 41): 17, (35, 42): 15, (9, 35): 17, (33, 46): 15, (16, 34): 17, (36, 45): 18, (34, 45): 19, (17, 35): 17, (7, 48): 17, (41, 44): 20, (35, 48): 17, (18, 40): 11, (31, 33): 19, (38, 47): 19, (43, 48): 16, (15, 27): 12, (39, 46): 15, (18, 33): 17, (0, 20): 14, (1, 17): 18, (13, 17): 16, (2, 22): 16, (0, 10): 13, (32, 47): 12, (14, 46): 20, (46, 49): 19, (3, 7): 16, (1, 11): 11, (34, 42): 15, (15, 47): 14, (32, 46): 18, (23, 31): 15, (19, 40): 14, (2, 48): 17, (0, 32): 14, (46, 48): 13, (20, 35): 18, (3, 45): 17, (23, 41): 16, (1, 45): 19, (6, 10): 19, (21, 34): 14, (4, 46): 19, (28, 35): 14, (2, 42): 11, (8, 41): 12, (7, 19): 13, (22, 41): 18, (5, 47): 11, (29, 34): 15, (9, 36): 16, (33, 39): 14, (16, 25): 16, (6, 44): 19, (10, 35): 18, (34, 36): 12, (8, 15): 20, (7, 41): 11, (37, 41): 18, (11, 42): 12, (9, 14): 10, (12, 45): 16, (10, 13): 14, (8, 21): 10, (13, 48): 17, (9, 16): 11, (14, 15): 19, (10, 23): 12, (2, 17): 20, (0, 1): 19, (14, 49): 11, (3, 12): 14, (1, 12): 16, (18, 48): 11, (4, 15): 11, (19, 49): 14, (2, 11): 16, (31, 38): 14, (0, 39): 12, (23, 39): 20, (5, 14): 10, (20, 42): 14, (3, 18): 15, (27, 49): 17, (1, 38): 17, (25, 33): 12, (6, 13): 13, (21, 43): 11, (4, 21): 16, (19, 23): 20, (2, 37): 11, (26, 38): 15, (7, 8): 16, (22, 32): 12, (5, 40): 10, (9, 45): 11, (23, 37): 14, (6, 39): 18, (30, 32): 13, (10, 42): 11, (17, 29): 20, (7, 38): 10, (22, 26): 14, (11, 35): 10, (18, 26): 16, (42, 47): 12, (30, 35): 17, (12, 36): 16, (43, 46): 16, (8, 28): 14, (13, 41): 16, (24, 36): 12, (24, 48): 17, (9, 25): 20, (24, 31): 15, (14, 22): 12, (40, 41): 13, (10, 30): 14, (25, 30): 12, (15, 23): 18, (11, 31): 10, (26, 29): 19, (0, 24): 20, (12, 24): 18, (1, 5): 20, (41, 46): 17, (13, 29): 15, (24, 43): 18, (14, 34): 12, (20, 49): 12, (3, 27): 12, (25, 42): 15, (4, 28): 19, (19, 28): 14, (26, 33): 14, (5, 17): 15, (20, 31): 18, (3, 33): 20, (27, 44): 16, (33, 49): 16, (16, 23): 16, (6, 30): 18, (21, 30): 19, (28, 47): 18, (17, 22): 19, (7, 31): 17, (22, 29): 10, (29, 46): 15, (35, 39): 17, (18, 21): 12, (33, 43): 14, (16, 45): 12, (6, 48): 10, (12, 35): 20, (18, 39): 12, (17, 40): 10, (13, 34): 10, (18, 47): 17, (42, 48): 13, (14, 25): 14, (38, 42): 19, (10, 25): 11, (23, 30): 12, (15, 28): 17, (32, 42): 20, (11, 20): 12, (30, 45): 16, (0, 31): 10, (12, 23): 12, (1, 30): 16, (13, 22): 13, (2, 29): 10, (14, 37): 17, (32, 34): 13, (1, 48): 19, (15, 32): 20, (4, 27): 19, (19, 37): 13, (26, 40): 18, (0, 43): 17, (5, 26): 20, (20, 38): 13, (3, 38): 16, (27, 37): 15, (1, 42): 15, (31, 40): 13, (6, 17): 15, (21, 39): 15, (4, 33): 18, (28, 38): 17, (34, 49): 20, (8, 36): 15, (7, 20): 20, (31, 43): 13, (5, 36): 11, (29, 39): 13, (35, 44): 17, (9, 33): 13, (33, 44): 15, (16, 36): 18, (6, 43): 13, (36, 47): 10, (10, 38): 20, (34, 43): 10, (8, 10): 20, (31, 49): 18, (37, 46): 19, (9, 11): 18, (38, 45): 18, (12, 48): 12, (8, 16): 10, (39, 40): 15, (11, 13): 13, (0, 22): 20, (31, 37): 17, (12, 14): 16, (1, 23): 13, (13, 15): 20, (2, 20): 19, (0, 12): 15, (14, 44): 19, (3, 9): 14, (1, 9): 12, (15, 41): 20, (19, 42): 19, (2, 14): 17, (0, 34): 12, (32, 36): 15, (20, 45): 14, (3, 47): 16, (1, 35): 17, (23, 48): 11, (6, 8): 16, (21, 32): 11, (4, 40): 17, (28, 48): 11, (2, 40): 19, (8, 43): 19, (7, 13): 12, (22, 47): 12, (5, 45): 16, (29, 32): 17, (9, 42): 14, (33, 37): 18, (16, 27): 19, (6, 34): 10, (24, 30): 13, (29, 48): 14, (10, 33): 14, (8, 49): 12, (7, 43): 18, (11, 44): 11, (9, 12): 15, (16, 49): 12, (12, 47): 14, (10, 11): 15, (8, 23): 12, (13, 46): 12, (37, 49): 10, (9, 22): 19, (24, 26): 10, (45, 49): 18, (10, 21): 16, (25, 27): 15, (11, 24): 16, (30, 47): 14, (0, 3): 12, (3, 14): 17, (27, 29): 19, (1, 2): 19, (4, 9): 20, (28, 30): 15, (2, 9): 12, (24, 38): 20, (5, 12): 19, (29, 31): 14, (3, 20): 18, (1, 36): 20, (25, 39): 18, (21, 41): 19, (4, 23): 18, (19, 25): 11, (2, 35): 16, (26, 36): 10, (7, 10): 17, (22, 38): 19, (5, 22): 18, (27, 41): 12, (16, 18): 13, (6, 37): 20, (30, 38): 14, (10, 40): 18, (17, 19): 10, (7, 32): 12, (22, 24): 10, (5, 48): 13, (11, 37): 17, (18, 24): 18, (42, 45): 12, (16, 40): 18, (12, 38): 14, (8, 30): 10, (41, 48): 18, (13, 39): 20, (9, 31): 13, (14, 20): 10, (38, 49): 14, (10, 28): 20, (25, 28): 14, (15, 17): 19, (41, 42): 12, (11, 17): 19, (26, 27): 11, (0, 26): 13, (12, 26): 15, (1, 27): 19, (13, 27): 17, (0, 48): 11, (24, 45): 12, (14, 32): 11, (3, 29): 12, (25, 40): 20, (15, 37): 20, (4, 30): 16, (19, 30): 11, (18, 28): 18}
    #for i in er.keys():
     #   r=list(i)
      #  G.add_edge(r[0],r[1],weight=er[i])

    for i in j.edges():
        r=list(i)
        e=np.random.random_integers(10,20)
        G.add_edge(r[0],r[1],weight=e)

    COVERh=nx.Graph()
    COVERh.add_nodes_from(G)
    COMPh=nx.number_connected_components(COVERh)
    # otras variables
    inf=m.factorial(20)
    u=nx.get_edge_attributes(G,'weight')
    def c(h):
         if h <= hmin:
            costo=K*h
         else:
            costo=(A*h)+B
         return costo
    def c_1(ci):
         if ci > (c(hmin)):
             l=(ci-B)/A
         else:
             l=ci
         return l

    def beta(n1,n2,d):
         try:
             aux=(2.0*(u[(n1,n2)]))
         except (IndexError, KeyError):
             aux=(2.0*(u[(n2,n1)]))
         HI=h[n1]+h[n2]+d
         if HI<aux:
             B =aux-HI
         else:
             B=0
         return B
    def nbrfun(n,d):
         p=[]
         r=set()
         for i in range(0,nx.number_connected_components(COVERh)):
             p.append(nx.connected_component_subgraphs(COVERh)[i])
             for o in p[i].nodes():
                 if o==n:
                     r=set(G.neighbors(n)) - set(p[i].neighbors(n))
         r=list(r)
         L=[]
         l=[]
         for i in range(0,len(r)):
             beTa=beta(n,r[i],d)
             G.add_node(r[i],hinc=beTa)
             G.add_node(r[i],cinc=(c(beTa + h[r[i]])- c(h[r[i]])))
             l.append((r[i],(c(beTa+ h[r[i]])-c(h[r[i]]))))
         l=dict(l)
         va= l.values()
         va.sort()
         for i in range(0,len(va)):
             for j in range(0,len(va)):
                 if l[r[j]]== va[i]:
                     if L.count(r[j])==0:
                        L.append(r[j])
         for i in range(0,nx.number_connected_components(COVERh)):
             ri=list(set(L) & set(p[i].nodes()))
             u=inf
             for j in range(0,len(ri)):
                 if L.index(ri[j])< u:
                     try:
                         L.remove(L[u])
                         break
                     except (IndexError):
                         pass
                     u = L.index(ri[j])
         return r, L

    def START_TC_ALGO( h, n, dirac):
         G.add_node(n,hinc=(dirac))
         G.add_node(n,cinc=c(h[n]+dirac)-c(h[n]))
         nbr, L= nbrfun(n,dirac)
         rbest, kbest=inf,0
         for k in range(1,len(L)+1):
             sum=0
             for i in range(0,k):
                 sum= (G.node[L[i]]['cinc'])+sum
             rtemp= ((G.node[n]['cinc']) + sum)/(k)
             if rtemp <  rbest:
                 kbest,rbest=k,rtemp
         j=0
         L=L[:kbest]
         if len(L)>0:
             for i in G.nodes():
                 if (i==L[j] or i==n):
                     if (j<kbest and j<(len(L)-1) ):
                         j=j+1
                 else:
                     G. add_node(i,hinc=0)
         incr= nx.get_node_attributes(G,'hinc')
         return rbest,incr, L

    for n in G.nodes():
         G.add_node(n,hi=0)

    while COMPh > 1:
         rbest=inf
         for n in G.nodes():
             h=nx.get_node_attributes(G,'hi')
             chn=c(h[n])
             i,e=1,(c_1(chn+ 1))
             H=[h[n],hmax]
             while e < hmax:
                 H.append(e)
                 e= c_1(chn + (i))
                 i=i+1
             for i in range(0, len(H)):
                 a=(H[i]-h[n])
                 if a<0:a=0
                 rtmp,incrtmp, mayl=START_TC_ALGO(h,n,a)
                 if (rtmp < rbest):
                     nodo,rbest,incrbest, mayL=n,rtmp,incrtmp, mayl
         for i in incrbest.keys():
             for j in range (0,len(mayL)):
                 if (incrbest[i] >= 0) and (i==mayL[j]):
                     COVERh.add_edge(nodo,i)
         for i in G.nodes():
             G.add_node(i,hi=h[i]+incrbest[i])
         COMPh=nx.number_connected_components(COVERh)
    costo =0
    for n in G.nodes():
        costo=costo+(c(G.node[n]['hi']))
    T=nx.minimum_spanning_tree(G)
    u1 =nx.get_edge_attributes(T,'weight')
    for n  in T.nodes():
        T.node[n]['hi']=0
    for n in T.edges():
        r=list(n)
        aux=T.node[r[0]]['hi']+T.node[r[1]]['hi']
        aux1=(2* u1[n])
        if aux< aux1:
            T.node[r[0]]['hi']=T.node[r[0]]['hi']+((aux1-aux)/2.0)
            T.node[r[1]]['hi']=T.node[r[1]]['hi']+((aux1-aux)/2.0)
    costo1 =0
    for n in T.nodes():
        costo1=costo1+(c(T.node[n]['hi']))
    print (COVERh.edges())
    print(nx.get_node_attributes(G,'hi'))
    print ('-----------------------------------------------------')
    '''dr=plt.figure()
    dr.add_subplot(131)
    nx.draw_shell(G)
    dr.add_subplot(132)
    nx.draw_shell(COVERh)
    dr.add_subplot(133)
    nx.draw_shell(T)
    plt.show()'''
    return costo,costo1
rtyy(10)
def datos(nmin, nmax, taz, nvec):
    data=[]
    Tda=[]
    Apda=[]
    for i in range(10,51,3):
        d=[]
        T=[]
        Ap=[]
        for j in range(20):
            a,a1=rtyy(i)
            d.append((a1-a)/a)
            T.append(a1)
            Ap.append(a)
        data.append((i,d))
        Tda.append((i,T))
        Apda.append((i,Ap))
    data=dict(data)
    Tda=dict(Tda)
    Apda=dict(Apda)
    des=[]
    med=[]
    for i in data.keys():
        des.append((i,np.std(data[i])))
        med.append((i,np.mean(data[i])))

    des=dict(des)
    med=dict(med)
    x=med.keys()
    y=med.values()
    error1=des.values()
    plt.errorbar(x, y, yerr=error1,linestyle="None", fmt='-o')
    plt.xticks(np.arange(min(med.keys())-1,max(med.keys())+2, 1.0))
    plt.title('Algoritmo Aproximado vs Heuristica Simple')
    plt.xlabel(u'Numero de Nodos')
    plt.ylabel(u'Media R_simple')
    plt.grid()
    #plt.savefig("estadisticas.png")
    plt.show()
    return med,des
